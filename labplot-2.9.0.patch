diff -ruNa a/src/backend/gsl/ExpressionParser.cpp b/src/backend/gsl/ExpressionParser.cpp
--- a/src/backend/gsl/ExpressionParser.cpp	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/gsl/ExpressionParser.cpp	2022-07-02 11:07:54.462720684 +0200
@@ -1,11 +1,11 @@
 /*
-    File             : ExpressionParser.cpp
-    Project          : LabPlot
-    Description      : C++ wrapper for the bison generated parser.
-    --------------------------------------------------------------------
-    SPDX-FileCopyrightText: 2014 Alexander Semke <alexander.semke@web.de>
-    SPDX-FileCopyrightText: 2014-2021 Stefan Gerlach <stefan.gerlach@uni.kn>
-    SPDX-License-Identifier: GPL-2.0-or-later
+	File             : ExpressionParser.cpp
+	Project          : LabPlot
+	Description      : C++ wrapper for the bison generated parser.
+	--------------------------------------------------------------------
+	SPDX-FileCopyrightText: 2014 Alexander Semke <alexander.semke@web.de>
+	SPDX-FileCopyrightText: 2014-2022 Stefan Gerlach <stefan.gerlach@uni.kn>
+	SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 
@@ -1460,14 +1460,16 @@
 
 /*
  * Evaluate cartesian expression returning true on success and false if parsing fails
+ * using given range
  */
-bool ExpressionParser::evaluateCartesian(const QString& expr, const QString& min, const QString& max,
-		int count, QVector<double>* xVector, QVector<double>* yVector,
-		const QStringList& paramNames, const QVector<double>& paramValues) {
-	DEBUG(Q_FUNC_INFO << ", v1: range = " << STDSTRING(min) << " .. " << STDSTRING(max))
-	gsl_set_error_handler_off();
-
-	const Range<double> range{min, max};
+bool ExpressionParser::evaluateCartesian(const QString& expr,
+										 const Range<double> range,
+										 int count,
+										 QVector<double>* xVector,
+										 QVector<double>* yVector,
+										 const QStringList& paramNames,
+										 const QVector<double>& paramValues) {
+	DEBUG(Q_FUNC_INFO << ", v0: range = " << range.toStdString())
 	const double step = range.stepSize(count);
 	DEBUG(Q_FUNC_INFO << ", range = " << range.toStdString() << ", step = " << step)
 
@@ -1475,6 +1477,7 @@
 		assign_symbol(qPrintable(paramNames.at(i)), paramValues.at(i));
 
 	SET_NUMBER_LOCALE
+	gsl_set_error_handler_off();
 	for (int i = 0; i < count; i++) {
 		const double x{ range.start() + step * i };
 		assign_symbol("x", x);
@@ -1494,6 +1497,23 @@
 
 	return true;
 }
+/*
+ * Evaluate cartesian expression returning true on success and false if parsing fails
+ * min and max are localized strings which are parsed to support expressions like "pi + 1.5"
+ */
+bool ExpressionParser::evaluateCartesian(const QString& expr,
+										 const QString& min,
+										 const QString& max,
+										 int count,
+										 QVector<double>* xVector,
+										 QVector<double>* yVector,
+										 const QStringList& paramNames,
+										 const QVector<double>& paramValues) {
+	DEBUG(Q_FUNC_INFO << ", v1: range = " << STDSTRING(min) << " .. " << STDSTRING(max))
+
+	const Range<double> range{min, max};
+	return evaluateCartesian(expr, range, count, xVector, yVector, paramNames, paramValues);
+}
 
 bool ExpressionParser::evaluateCartesian(const QString& expr, const QString& min, const QString& max,
 		int count, QVector<double>* xVector, QVector<double>* yVector) {
diff -ruNa a/src/backend/gsl/ExpressionParser.h b/src/backend/gsl/ExpressionParser.h
--- a/src/backend/gsl/ExpressionParser.h	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/gsl/ExpressionParser.h	2022-07-02 11:07:54.462720684 +0200
@@ -1,11 +1,11 @@
 /*
-    File             : ExpressionParser.h
-    Project          : LabPlot
-    Description      : c++ wrapper for the bison generated parser.
-    --------------------------------------------------------------------
-    SPDX-FileCopyrightText: 2014 Alexander Semke <alexander.semke@web.de>
-    SPDX-FileCopyrightText: 2020 Stefan Gerlach <stefan.gerlach@uni.kn>
-    SPDX-License-Identifier: GPL-2.0-or-later
+	File             : ExpressionParser.h
+	Project          : LabPlot
+	Description      : c++ wrapper for the bison generated parser.
+	--------------------------------------------------------------------
+	SPDX-FileCopyrightText: 2014 Alexander Semke <alexander.semke@web.de>
+	SPDX-FileCopyrightText: 2020-2022 Stefan Gerlach <stefan.gerlach@uni.kn>
+	SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 
@@ -27,11 +27,22 @@
 
 	bool isValid(const QString& expr, const QStringList& vars);
 	QStringList getParameter(const QString& expr, const QStringList& vars);
-	bool evaluateCartesian( const QString& expr, const QString& min, const QString& max,
-					int count, QVector<double>* xVector, QVector<double>* yVector,
-					const QStringList& paramNames, const QVector<double>& paramValues);
-	bool evaluateCartesian(const QString& expr, const QString& min, const QString& max,
-					int count, QVector<double>* xVector, QVector<double>* yVector);
+	bool evaluateCartesian(const QString& expr,
+						   Range<double> range,
+						   int count,
+						   QVector<double>* xVector,
+						   QVector<double>* yVector,
+						   const QStringList& paramNames,
+						   const QVector<double>& paramValues);
+	bool evaluateCartesian(const QString& expr,
+						   const QString& min,
+						   const QString& max,
+						   int count,
+						   QVector<double>* xVector,
+						   QVector<double>* yVector,
+						   const QStringList& paramNames,
+						   const QVector<double>& paramValues);
+	bool evaluateCartesian(const QString& expr, const QString& min, const QString& max, int count, QVector<double>* xVector, QVector<double>* yVector);
 	bool evaluateCartesian(const QString& expr, QVector<double>* xVector, QVector<double>* yVector);
 	bool evaluateCartesian(const QString& expr, QVector<double>* xVector, QVector<double>* yVector,
 					const QStringList& paramNames, const QVector<double>& paramValues);
diff -ruNa a/src/backend/lib/Range.h b/src/backend/lib/Range.h
--- a/src/backend/lib/Range.h	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/lib/Range.h	2022-07-02 11:07:54.462720684 +0200
@@ -57,8 +57,8 @@
 	Range(T start, T end, Format format = Format::Numeric, Scale scale = Scale::Linear) {
 		this->setRange(start, end, format, scale);
 	}
-	Range(const QString& start, const QString& end, const Format format = Format::Numeric,
-	      const Scale scale = Scale::Linear) {
+	// start and end as localized strings like "pi + 1.5" (will be parsed)
+	Range(const QString& start, const QString& end, const Format format = Format::Numeric, const Scale scale = Scale::Linear) {
 		SET_NUMBER_LOCALE
 		// min
 		double min = parse(qPrintable(start.simplified()), qPrintable(numberLocale.name()));
diff -ruNa a/src/backend/worksheet/plots/cartesian/XYCurve.cpp b/src/backend/worksheet/plots/cartesian/XYCurve.cpp
--- a/src/backend/worksheet/plots/cartesian/XYCurve.cpp	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/worksheet/plots/cartesian/XYCurve.cpp	2022-06-18 13:12:58.340448549 +0200
@@ -1942,18 +1942,47 @@
 			return;
 		}
 
-		const int endRow{qMin(numberOfPoints, valuesColumn->rowCount())};
-		auto xColMode{valuesColumn->columnMode()};
+		const int endRow{qMin(qMin(xColumn->rowCount(), yColumn->rowCount()), valuesColumn->rowCount())};
+		auto xColMode{xColumn->columnMode()};
+		auto vColMode{valuesColumn->columnMode()};
+
+		// need to check x range
+		auto cs = plot()->coordinateSystem(q->coordinateSystemIndex());
+		auto xRange = plot()->xRange(cs->xIndex());
+
+		size_t index = 0; // index of valid points (logicalPoints)
 		for (int i = 0; i < endRow; ++i) {
-			if (!m_pointVisible.at(i)) continue;
+			// ignore value labels for invalid data points
+			// otherwise the assignment to the data points get lost
+			if (!xColumn->isValid(i) || xColumn->isMasked(i) || !yColumn->isValid(i) || yColumn->isMasked(i) || !m_pointVisible.at(index++))
+				continue;
 
 			if ( !valuesColumn->isValid(i) || valuesColumn->isMasked(i) ) {
 				m_valueStrings << QString();
 				continue;
 			}
 
+			// check if inside x range
 			switch (xColMode) {
 			case AbstractColumn::ColumnMode::Double:
+			case AbstractColumn::ColumnMode::Integer:
+			case AbstractColumn::ColumnMode::BigInt:
+				if (!xRange.contains(xColumn->valueAt(i)))
+					continue;
+				break;
+			case AbstractColumn::ColumnMode::DateTime:
+			case AbstractColumn::ColumnMode::Month:
+			case AbstractColumn::ColumnMode::Day:
+				if (xColumn->dateTimeAt(i) < QDateTime::fromMSecsSinceEpoch(xRange.start())
+					|| xColumn->dateTimeAt(i) > QDateTime::fromMSecsSinceEpoch(xRange.end()))
+					continue;
+				break;
+			case AbstractColumn::ColumnMode::Text:
+				break;
+			}
+
+			switch (vColMode) {
+			case AbstractColumn::ColumnMode::Double:
 				m_valueStrings << valuesPrefix + numberLocale.toString(valuesColumn->valueAt(i), valuesNumericFormat, valuesPrecision) + valuesSuffix;
 				break;
 			case AbstractColumn::ColumnMode::Integer:
@@ -1982,6 +2011,9 @@
 
 	i = 0;
 	for (const auto& string : qAsConst(m_valueStrings)) {
+		// catch case with more label strings than scene points (should not happen even with custom column)
+		if (i >= m_scenePoints.size())
+			break;
 		const int w{fm.boundingRect(string).width()};
 		const double x{m_scenePoints.at(i).x()};
 		const double y{m_scenePoints.at(i).y()};
diff -ruNa a/src/backend/worksheet/plots/cartesian/XYEquationCurve.h b/src/backend/worksheet/plots/cartesian/XYEquationCurve.h
--- a/src/backend/worksheet/plots/cartesian/XYEquationCurve.h	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/worksheet/plots/cartesian/XYEquationCurve.h	2022-07-02 11:07:54.462720684 +0200
@@ -31,7 +31,7 @@
 		EquationType type{EquationType::Cartesian};
 		QString expression1;
 		QString expression2;
-		QString min;
+		QString min;	// localized strings to support expressions
 		QString max;
 		int count{1000};
 	};
diff -ruNa a/src/backend/worksheet/plots/cartesian/XYFitCurve.cpp b/src/backend/worksheet/plots/cartesian/XYFitCurve.cpp
--- a/src/backend/worksheet/plots/cartesian/XYFitCurve.cpp	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/worksheet/plots/cartesian/XYFitCurve.cpp	2022-07-02 11:07:54.462720684 +0200
@@ -1,10 +1,10 @@
 /*
-    File                 : XYFitCurve.cpp
-    Project              : LabPlot
-    Description          : A xy-curve defined by a fit model
-    --------------------------------------------------------------------
-    SPDX-FileCopyrightText: 2014-2021 Alexander Semke <alexander.semke@web.de>
-    SPDX-FileCopyrightText: 2016-2021 Stefan Gerlach <stefan.gerlach@uni.kn>
+	File                 : XYFitCurve.cpp
+	Project              : LabPlot
+	Description          : A xy-curve defined by a fit model
+	--------------------------------------------------------------------
+	SPDX-FileCopyrightText: 2014-2021 Alexander Semke <alexander.semke@web.de>
+	SPDX-FileCopyrightText: 2016-2022 Stefan Gerlach <stefan.gerlach@uni.kn>
 
     SPDX-License-Identifier: GPL-2.0-or-later
 */
@@ -642,6 +642,11 @@
 	}
 }
 
+void XYFitCurve::clearFitResult() {
+	Q_D(XYFitCurve);
+	d->fitResult = XYFitCurve::FitResult();
+}
+
 /*!
 	Returns an icon to be used in the project explorer.
 */
@@ -2143,7 +2148,7 @@
 		if (!fitData.evalRange.isZero()) 	// avoid zero range
 			xRange = fitData.evalRange;
 	}
-	DEBUG(Q_FUNC_INFO << ", eval range = " << STDSTRING(xRange.toString()));
+	DEBUG(Q_FUNC_INFO << ", eval range = " << xRange.toStdString());
 	xVector->resize((int)fitData.evaluatedPoints);
 	yVector->resize((int)fitData.evaluatedPoints);
 	DEBUG(Q_FUNC_INFO << ", vector size = " << xVector->size());
@@ -2152,9 +2157,13 @@
 	if (preview)	// results not available yet
 		paramValues = fitData.paramStartValues;
 
-	SET_NUMBER_LOCALE
-	bool rc = parser->evaluateCartesian(fitData.model, numberLocale.toString(xRange.start()), numberLocale.toString(xRange.end()), (int)fitData.evaluatedPoints,
-						xVector, yVector, fitData.paramNames, paramValues);
+	bool rc = parser->evaluateCartesian(fitData.model,
+										xRange,
+										(int)fitData.evaluatedPoints,
+										xVector,
+										yVector,
+										fitData.paramNames,
+										paramValues);
 	if (!rc) {
 		DEBUG(Q_FUNC_INFO << ", ERROR: Parsing fit function failed")
 		xVector->clear();
diff -ruNa a/src/backend/worksheet/plots/cartesian/XYFitCurve.h b/src/backend/worksheet/plots/cartesian/XYFitCurve.h
--- a/src/backend/worksheet/plots/cartesian/XYFitCurve.h	2022-05-02 07:35:16.000000000 +0200
+++ b/src/backend/worksheet/plots/cartesian/XYFitCurve.h	2022-06-25 10:11:12.080051594 +0200
@@ -104,10 +104,11 @@
 
 	void recalculate() override;
 	void evaluate(bool preview);
-	void initFitData(XYAnalysisCurve::AnalysisAction);
-	static void initFitData(XYFitCurve::FitData&);
 	void initStartValues(const XYCurve*);
 	static void initStartValues(XYFitCurve::FitData&, const XYCurve*);
+	void initFitData(XYAnalysisCurve::AnalysisAction);
+	static void initFitData(XYFitCurve::FitData&);
+	void clearFitResult();
 
 	QIcon icon() const override;
 	void save(QXmlStreamWriter*) const override;
diff -ruNa a/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp b/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp
--- a/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp	2022-05-02 07:35:16.000000000 +0200
+++ b/src/kdefrontend/dockwidgets/XYFitCurveDock.cpp	2022-06-25 10:11:12.080051594 +0200
@@ -865,15 +865,16 @@
 }
 
 /*!
- * Show the preview pixmap of the fit model expression for the current model category and type.
  * Called when the model type or the degree of the model were changed.
+ * Show the preview pixmap of the fit model expression for the current model category and type.
  */
 void XYFitCurveDock::updateModelEquation() {
 
 	if (m_fitData.modelCategory == nsl_fit_model_custom) {
-		DEBUG("XYFitCurveDock::updateModelEquation() category = nsl_fit_model_custom, type = " << m_fitData.modelType);
+		DEBUG(Q_FUNC_INFO << ", category = nsl_fit_model_custom, type = " << m_fitData.modelType);
 	} else {
-		DEBUG("XYFitCurveDock::updateModelEquation() category = " << nsl_fit_model_category_name[m_fitData.modelCategory] << ", type = " << m_fitData.modelType);
+		DEBUG(Q_FUNC_INFO << ", category = " << nsl_fit_model_category_name[m_fitData.modelCategory]
+																  << ", type = " << m_fitData.modelType);
 	}
 
 	//this function can also be called when the value for the degree was changed -> update the fit data structure
@@ -885,6 +886,11 @@
 		XYFitCurve::initStartValues(m_fitData, m_curve);
 		// udpate parameter widget
 		fitParametersWidget->setFitData(&m_fitData);
+		// invalidate result
+		m_fitCurve->clearFitResult();
+		if (m_messageWidget)
+			m_messageWidget->close();
+		showFitResult();
 	}
 
 	// variables/parameter that are known
@@ -1113,8 +1119,8 @@
 	this->showFitResult();
 	uiGeneralTab.pbRecalculate->setEnabled(false);
 
-	//show the warning/error message, if available
-	const XYFitCurve::FitResult& fitResult = m_fitCurve->fitResult();
+	// show the warning/error message, if available
+	const auto& fitResult = m_fitCurve->fitResult();
 	const QString& status = fitResult.status;
 	if (status != i18n("Success")) {
 		Q_EMIT info(i18n("Fit status: %1", fitResult.status));
@@ -1312,7 +1318,7 @@
 	for (const auto &s : m_fitData.paramNamesUtf8)
 		sCorr += '\t' + s;
 	int index{0};
-	DEBUG(Q_FUNC_INFO << ", correlation values size = " << fitResult.correlationMatrix.size())
+	DEBUG(Q_FUNC_INFO << ", correlation matrix size = " << fitResult.correlationMatrix.size())
 	for (int i = 0; i < np; i++) {
 		sCorr += '\n' + m_fitData.paramNamesUtf8.at(i);
 		for (int j = 0; j <= i; j++)
diff -ruNa a/src/kdefrontend/widgets/FitOptionsWidget.cpp b/src/kdefrontend/widgets/FitOptionsWidget.cpp
--- a/src/kdefrontend/widgets/FitOptionsWidget.cpp	2022-05-02 07:35:16.000000000 +0200
+++ b/src/kdefrontend/widgets/FitOptionsWidget.cpp	2022-07-02 11:07:54.466720663 +0200
@@ -1,11 +1,11 @@
 /*
-    File                 : FitOptionsWidget.cc
-    Project              : LabPlot
-    Description          : widget for editing advanced fit options
-    --------------------------------------------------------------------
-    SPDX-FileCopyrightText: 2014-2020 Alexander Semke <alexander.semke@web.de>
-    SPDX-FileCopyrightText: 2017-2018 Stefan Gerlach <stefan.gerlach@uni.kn>
-    SPDX-License-Identifier: GPL-2.0-or-later
+	File                 : FitOptionsWidget.cpp
+	Project              : LabPlot
+	Description          : widget for editing advanced fit options
+	--------------------------------------------------------------------
+	SPDX-FileCopyrightText: 2014-2020 Alexander Semke <alexander.semke@web.de>
+	SPDX-FileCopyrightText: 2017-2018 Stefan Gerlach <stefan.gerlach@uni.kn>
+	SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "FitOptionsWidget.h"
